#!/usr/bin/env python
# -*- coding: utf-8 -*-

# 返回一个空字典
d1 = dict()
print("d1", d1)

# 传递参数
d2 = dict(id=1948, name="Washer", size=3)
# 这里注意字典打印的顺序, 与我们给定的顺序是不同的
print("d2", d2)

# 传递另一个字典作为参数
d3 = dict(d2)
print("d3", d3)

d4 = dict(zip(('id', 'name', 'size'), (1948, 'Washer', 3)))
print("d4:", d4)

# 传递一个可迭代对象, 可以是一个元组, 也可以是一个列表
# 迭代对象中每个元素又是另一个包含2个元素的可迭代对象, 元素0->key, 元素 1->value
d5 = dict([['id', 1948], ('name', 'Washer'), ('size', 3)])
print("d5:", d5)

# 也可以直接通过 大括号 创建字典
# 字典中的键值要保证是唯一的, 否则后面出现的键将会覆盖前面先出现的键
# 字典中的键可以是任何可序列化对象, 可序列化对象简单理解就是其值不可改变的对象, 数字, 字符串, 元组就是可序列化对象
d6 = {"root": 17, 'blue': [75, 'R', 2], 21:'venus', -14:None, 'mars':'rover', (4,11):18, 0:45}
print("d6", d6)

# 通过键值访问对应的元素
print("d6:root", d6['root'])
print("d6:blue", d6['blue'])
print("d6:-14", d6[-14])
print("d6:(4,11)", d6[(4,11)])
# 当访问一个不存在的键时, 会抛出 KeyError 异常
#  d6['x']

# 新曾元素, 因为字典是非顺序的, 所以新增的元素不一定会被追加到字典的结尾
d6['x'] = 59
print('d6', d6)

# 可以像之前讲解变量时那样, 使用 del 删除字典中的一个元素
del d6['x']
print('d6', d6)

# 我们可以使用内置函数 len() 来获取字典的长度
print(len(d6))
